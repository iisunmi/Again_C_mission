#include "turboc.h"

#define ESC 27
#define MAXENEMY 10  //적의 수  
#define MAXBALL 20 //적의 총알 개수  
#define MAXBULLET 5 //파이터의 총알 개수   
#define BOOL int //얘는 왜 구조체 안에 멤버자리에 있는거 죵 


#define TRUE 1
#define FALSE 0  //while문에서 숫자 대신 참거짓 활용하려고 씀  

int fx;
int Score;

struct tag_Enemy
{
    BOOL exist;
    int Type;
    int x, y;
    int Delta;
    int nFrame;
    int nStay;
} Enemy[MAXENEMY];

struct tag_Ball
{
    BOOL exist;
    int x, y;
    int nFrame;
    int nStay;
} Ball[MAXBALL];

char* arEnemy[] = { " ;:^:; "," zZWZz ", " oO@Oo ", " <-=-> " };  //적의 형태가 4가지이다.  

struct tag_Bullet
{
    BOOL exist;
    int x, y;
} Bullet[MAXBULLET];

BOOL IsKeyDown(int Key)
{
    return ((GetAsyncKeyState(Key) & 0x8000) != 0);
      //현재 키의 상태를 알아오는 함수입니다. 이 함수는 키가 눌려졌을 때(down)나 떨어졌을 때(up) 호출됩니다. 
	  //이 함수가 호출되기 이전에 키를 누른 상태였는지와 함수가 호출된 시점인 현재에도 누르고 있는 상태인지를 알 수 있습니다.
	  //0X8000 :이전에 누른 적이 없고 호출 시점에는 눌려있는 상태
	  // !=0 --> 참이라는 뜻인가? 
}

void main()
{
    int ch;
    int i, j;
    BOOL bFound;
    int count;

    randomize();
    setcursortype(NOCURSOR);
    while (TRUE) {
        clrscr();
        fx = 40;  // 파이터의 처음 위치?? 
        Score = 0;    //점수 초기화  
        for (i = 0; i < MAXENEMY; i++) Enemy[i].exist = FALSE;
        for (i = 0; i < MAXBALL; i++) Ball[i].exist = FALSE;
        for (i = 0; i < MAXBULLET; i++) Bullet[i].exist = FALSE;    //=false는 뭘 의미하나요?  

        for (count = 0;; count++) {
            // 좌우 이동 처리
            if (count % 5 == 0) {
                if (IsKeyDown(VK_LEFT)) {
                    if (fx > 6) fx--;
                }
                if (IsKeyDown(VK_RIGHT)) {
                    if (fx < 72) fx++;
                }  // 파이터의 처음위치(40)에서 좌우로 움직이는데, 6과 72사이에서 움직일수 있다. 
            }
            // 키 입력 처리
            if (_kbhit()) {
                ch = _getch();
                if (ch == 0xE0 || ch == 0) {
                    _getch();
                }
                else {
                    switch (ch) {
                    case ' ':  //스페이스바를 눌렀을 때? 새로운 총알이 생성?  
                        // 새로운 총알 생성
                        for (i = 0; i < MAXBULLET && Bullet[i].exist == TRUE; i++) { ; }  //???? 
                        if (i != MAXBULLET) { //총알이 가득 충전되지 않았을 때  
                            Bullet[i].x = fx;
                            Bullet[i].y = 23;
                            Bullet[i].exist = TRUE;
                        }
                        break;
                    case ESC:  //ESC를 누르면 게임이 종료된다.  
                        goto end;
                    }
                }
            }

            // 적군 생성
            if (random(100) == 0) {
                for (i = 0; i < MAXENEMY && Enemy[i].exist == TRUE; i++) { ; }
                if (i != MAXENEMY) { //적의 수가 10이 아닐 때  
                    if (random(2) == 1) {
                        Enemy[i].x = 5;
                        Enemy[i].Delta = 1;
                    }
                    else {
                        Enemy[i].x = 75;
                        Enemy[i].Delta = -1;
                    }
                    for (;;) {
                        Enemy[i].y = random(10) + 1;
                        for (bFound = FALSE, j = 0; j < MAXENEMY; j++) {
                            if (Enemy[j].exist == TRUE && Enemy[j].y == Enemy[i].y) {
                                bFound = TRUE;
                                break;
                            }
                        }
                        if (bFound == FALSE) {
                            break;
                        }
                    }
                    Enemy[i].nFrame = Enemy[i].nStay = random(6) + 1;
                    Enemy[i].Type = random(sizeof(arEnemy) / sizeof(arEnemy[0]));
                    Enemy[i].exist = TRUE;
                }
            }

            // 아군 총알 이동 및 출력
            for (i = 0; i < MAXBULLET; i++) {
                if (Bullet[i].exist) {
                    if (count % 3) break;  //count가 3미만일 때 break.  
                    gotoxy(Bullet[i].x, Bullet[i].y); _putch(' ');
                    if (Bullet[i].y == 0) { //총알의 위치가 y좌표의 0일 때(즉, 천장에 닿았을 때, 총알은 사라진다 ?  
                        Bullet[i].exist = FALSE;
                    }
                    else {
                        Bullet[i].y--; // y좌표가 0이 아닐 때, y를 감소시킨다(즉, 천장으로 한칸씩 이동된다.) 
                        gotoxy(Bullet[i].x, Bullet[i].y); _putch('@');  //총알의 모양은 @이다. 
                    }
                }
            }

            // 적군과 아군 총알의 충돌 판정
            for (i = 0; i < MAXENEMY; i++) {
                if (Enemy[i].exist == FALSE || Enemy[i].Type == -1) continue; //적이 존재하지않거나, type이 -1이면 아래의 제어문을 무시하고 돌아라. 
                for (j = 0; j < MAXBULLET; j++) {
                    if (Bullet[j].exist == FALSE) continue; //총알이 없으면 아래의 제어문을 무시하고 돌아라.  
                    if (Enemy[i].y == Bullet[j].y && abs(Enemy[i].x - Bullet[j].x) <= 2) { //적과 총알의 위치가 같아지고,....abs가 뭐지?  
                        gotoxy(Bullet[j].x, Bullet[j].y); _putch(' '); //총알이 있던 위치에 빈칸을 넣어라.  
                        Bullet[j].exist = FALSE; //총알이 존재하지 않는다.  
                        Enemy[i].Type = -1;  //???
                        gotoxy(Enemy[i].x - 3, Enemy[i].y); //적은 왼쪽으로 3칸 이동?  
                        puts(" .,:,. ");  //이렇게 생긴 적을 넣어라.  
                        Score += 7 - Enemy[i].nFrame; // ???
                        Enemy[i].nFrame = Enemy[i].nStay = 50; //???
                        break;
                    }
                }
            }

            // 적군 총알 이동
            for (i = 0; i < MAXBALL; i++) {
                if (Ball[i].exist == FALSE) continue; //적의 총알이 존재하지 않으면 아래의 제어문 무시하고 for문 돌아라.  
                if (--Ball[i].nStay == 0) {
                    Ball[i].nStay = Ball[i].nFrame;
                    gotoxy(Ball[i].x, Ball[i].y); _putch(' ');
                    if (Ball[i].y >= 23) {
                        Ball[i].exist = FALSE;
                    } 
                    else {
                        if (random(5)) {
                            if (Ball[i].x < fx) {
                                Ball[i].x++;
                            }
                            else {
                                Ball[i].x--;
                            }
                        }
                        Ball[i].y++;
                        gotoxy(Ball[i].x, Ball[i].y); _putch('*');
                    }
                }
            }

            // 적군 총알과 아군의 충돌 판정
            for (i = 0; i < MAXBALL; i++) {
                if (Ball[i].exist == FALSE) continue;
                if (Ball[i].y == 23 && abs(Ball[i].x - fx) <= 2) {
                    gotoxy(fx - 3, 21); puts("   .   ");
                    gotoxy(fx - 3, 22); puts(" .  . .");
                    gotoxy(fx - 3, 23); puts("..:V:..");  //적의 총에 맞으면 파이터가 아래로  
                    delay(500);
                    goto die; 
                }
            }

            // 적군 이동 및 출력
            for (i = 0; i < MAXENEMY; i++) {
                if (Enemy[i].exist == FALSE) continue;
                if (--Enemy[i].nStay == 0) {
                    if (Enemy[i].Type == -1) {
                        gotoxy(Enemy[i].x - 3, Enemy[i].y);
                        puts("       ");
                        Enemy[i].exist = FALSE;
                        continue;
                    }
                    Enemy[i].nStay = Enemy[i].nFrame;
                    if (Enemy[i].x >= 76 || Enemy[i].x <= 4) {
                        Enemy[i].exist = FALSE;
                        gotoxy(Enemy[i].x - 3, Enemy[i].y);
                        puts("       ");
                    }
                    else {
                        Enemy[i].x += Enemy[i].Delta;
                        gotoxy(Enemy[i].x - 3, Enemy[i].y);
                        puts(arEnemy[Enemy[i].Type]);

                        // 총알 발사
                        if (random(40) == 0) {
                            for (j = 0; j < MAXBALL && Ball[j].exist == TRUE; j++) { ; }
                            if (j != MAXBALL) {
                                Ball[j].x = Enemy[i].x + 2;
                                Ball[j].y = Enemy[i].y + 1;
                                Ball[j].nFrame = Ball[j].nStay = Enemy[i].nFrame * 6;
                                Ball[j].exist = TRUE;
                            }
                        }
                    }
                }
            }

            // 파이터 및 점수 출력
            gotoxy(fx - 3, 23);
            puts(" <<A>> ");
            gotoxy(0, 24);
            printf("점수=%d", Score);

            // 초당 100 프레임
            delay(10);
        }
    die:
        {; }
    }
end:
    setcursortype(NORMALCURSOR);
}
